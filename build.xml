<project xmlns:ivy="antlib:org.apache.ivy.ant" 
       name="OneClickAutomation" default="main" basedir=".">
	<description>
		Create a Java Project (JAR) with Ant build script
	</description>

	<property name="projectName" value="OneClickAutomation" />
	<property name="src.dir" location="src" />
	<property name="build.dir" location="bin" />
	<property name="dist.dir" location="dist" />
	<property name="dist.lib.dir" location="dist/lib" />
	<property name="lib.dir" value="lib" />
	<property name="main-class" value="ind.com.pmt.OneClickAutomation" />

	 <target name="resolveDependencies">
		<mkdir dir="lib" />
		<get src="https://github.com/ElyxorCorp/wink-json4j/releases/download/v1.5.1/wink-json4j-1.5.1.jar" dest="lib/wink-json4j-1.5.1.jar" usetimestamp="true" />
		<get src="http://central.maven.org/maven2/jsch/jsch/0.1.8/jsch-0.1.8.jar" dest="lib/jsch-0.1.8.jar" usetimestamp="true" />
		<get src="./OneClickAutomation/lib/jxl-2.6.jar" dest="lib/jxl-2.6.jar" usetimestamp="true" />
		<get src="./OneClickAutomation/lib/httpclient-4.2.3.jar" dest="lib/httpclient-4.2.3.jar" usetimestamp="true" />
		<get src="./OneClickAutomation/lib/httpcore-4.4.10.jar" dest="lib/httpcore-4.4.10.jar" usetimestamp="true" />		
	</target>

	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<!-- external libraries classpath, we don't need sources and javadoc -->
	<path id="classpath">
		<fileset dir="${basedir}/">
			<include name="${lib.dir}/*.jar" />
			<exclude name="${lib.dir}/*sources.jar"/>
			<exclude name="${lib.dir}/*javadoc.jar"/>
		</fileset>
	</path>

	<!-- To work with external libraries, need classpath to compile -->
	<target name="compile" depends="init" description="compile the source ">
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" />
		<!--javac 
			debug="true"
			destdir="${build.dir}"
			srcdir="${src.dir}"
			target="1.7"
			classpathref="classpath"
		>
		</javac -->
	</target>

	<!-- constructs the external libraries classpath name -->
	<pathconvert property="classpath.name" pathsep=" ">
		<path refid="classpath" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.jar" to="lib/*.jar" />
			</chainedmapper>
		</mapper>
	</pathconvert>
	
	<target name="copy-properties">
		<copy todir="${build.dir}">
			<fileset dir="${src.dir}" includes="**/*.properties"/>
		</copy>
	</target>
	

	<target name="copy-dependencies">
		<copy todir="${dist.lib.dir}">
			<fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
		</copy>
	</target>

	<!-- jar it, and declares the ext libraries in manifest.mf file -->
	<target name="jar" depends="resolveDependencies,copy-properties,compile, copy-dependencies" description="package, output to JAR">

		<echo message="classpath.name : ${classpath.name} " />

		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${basedir}/${projectName}.jar" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
				<attribute name="Class-Path" value="${classpath.name}" />
			</manifest>
			 <zipgroupfileset dir="lib" includes="*.jar"/>
		</jar>
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete file="${basedir}/${projectName}.jar" />
	</target>

	<!-- Default, run this -->
	<target name="main" depends="clean,jar" />

</project>